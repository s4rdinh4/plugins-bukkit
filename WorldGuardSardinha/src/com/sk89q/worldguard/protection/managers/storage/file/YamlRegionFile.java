/*     */ package com.sk89q.worldguard.protection.managers.storage.file;
/*     */ 
/*     */ import com.google.common.base.Preconditions;
/*     */ import com.sk89q.util.yaml.YAMLFormat;
/*     */ import com.sk89q.util.yaml.YAMLNode;
/*     */ import com.sk89q.util.yaml.YAMLProcessor;
/*     */ import com.sk89q.worldedit.BlockVector;
/*     */ import com.sk89q.worldedit.BlockVector2D;
/*     */ import com.sk89q.worldedit.Vector;
/*     */ import com.sk89q.worldguard.domains.DefaultDomain;
/*     */ import com.sk89q.worldguard.protection.flags.Flag;
/*     */ import com.sk89q.worldguard.protection.managers.RegionDifference;
/*     */ import com.sk89q.worldguard.protection.managers.storage.DifferenceSaveException;
/*     */ import com.sk89q.worldguard.protection.managers.storage.RegionDatabase;
/*     */ import com.sk89q.worldguard.protection.managers.storage.RegionDatabaseUtils;
/*     */ import com.sk89q.worldguard.protection.managers.storage.StorageException;
/*     */ import com.sk89q.worldguard.protection.regions.GlobalProtectedRegion;
/*     */ import com.sk89q.worldguard.protection.regions.ProtectedCuboidRegion;
/*     */ import com.sk89q.worldguard.protection.regions.ProtectedPolygonalRegion;
/*     */ import com.sk89q.worldguard.protection.regions.ProtectedRegion;
/*     */ import java.io.File;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.IOException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.HashSet;
/*     */ import java.util.LinkedHashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import java.util.UUID;
/*     */ import java.util.logging.Level;
/*     */ import java.util.logging.Logger;
/*     */ import org.yaml.snakeyaml.DumperOptions;
/*     */ import org.yaml.snakeyaml.Yaml;
/*     */ import org.yaml.snakeyaml.constructor.BaseConstructor;
/*     */ import org.yaml.snakeyaml.constructor.SafeConstructor;
/*     */ import org.yaml.snakeyaml.representer.Representer;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class YamlRegionFile
/*     */   implements RegionDatabase
/*     */ {
/*  67 */   private static final Logger log = Logger.getLogger(YamlRegionFile.class.getCanonicalName());
/*     */ 
/*     */ 
/*     */   
/*     */   private static final Yaml ERROR_DUMP_YAML;
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String FILE_HEADER = "#\r\n# WorldGuard regions file\r\n#\r\n# WARNING: THIS FILE IS AUTOMATICALLY GENERATED. If you modify this file by\r\n# hand, be aware that A SINGLE MISTYPED CHARACTER CAN CORRUPT THE FILE. If\r\n# WorldGuard is unable to parse the file, your regions will FAIL TO LOAD and\r\n# the contents of this file will reset. Please use a YAML validator such as\r\n# http://yaml-online-parser.appspot.com (for smaller files).\r\n#\r\n# REMEMBER TO KEEP PERIODICAL BACKUPS.\r\n#";
/*     */ 
/*     */   
/*     */   private final String name;
/*     */ 
/*     */   
/*     */   private final File file;
/*     */ 
/*     */ 
/*     */   
/*     */   static {
/*  86 */     DumperOptions options = new DumperOptions();
/*  87 */     options.setIndent(4);
/*  88 */     options.setDefaultFlowStyle(DumperOptions.FlowStyle.AUTO);
/*     */     
/*  90 */     ERROR_DUMP_YAML = new Yaml((BaseConstructor)new SafeConstructor(), new Representer(), options);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public YamlRegionFile(String name, File file) {
/* 100 */     Preconditions.checkNotNull(name);
/* 101 */     Preconditions.checkNotNull(file);
/* 102 */     this.name = name;
/* 103 */     this.file = file;
/*     */   }
/*     */ 
/*     */   
/*     */   public String getName() {
/* 108 */     return this.name;
/*     */   }
/*     */ 
/*     */   
/*     */   public Set<ProtectedRegion> loadAll() throws StorageException {
/* 113 */     Map<String, ProtectedRegion> loaded = new HashMap<String, ProtectedRegion>();
/*     */     
/* 115 */     YAMLProcessor config = createYamlProcessor(this.file);
/*     */     try {
/* 117 */       config.load();
/* 118 */     } catch (FileNotFoundException e) {
/* 119 */       return new HashSet<ProtectedRegion>(loaded.values());
/* 120 */     } catch (IOException e) {
/* 121 */       throw new StorageException("Failed to load region data from '" + this.file + "'", e);
/*     */     } 
/*     */     
/* 124 */     Map<String, YAMLNode> regionData = config.getNodes("regions");
/*     */     
/* 126 */     if (regionData == null) {
/* 127 */       return Collections.emptySet();
/*     */     }
/*     */     
/* 130 */     Map<ProtectedRegion, String> parentSets = new LinkedHashMap<ProtectedRegion, String>();
/*     */     
/* 132 */     for (Map.Entry<String, YAMLNode> entry : regionData.entrySet()) {
/* 133 */       String id = entry.getKey();
/* 134 */       YAMLNode node = entry.getValue();
/*     */       
/* 136 */       String type = node.getString("type");
/*     */       
/*     */       try {
/*     */         GlobalProtectedRegion globalProtectedRegion;
/* 140 */         if (type == null) {
/* 141 */           log.warning("Undefined region type for region '" + id + "'!\n" + "Here is what the region data looks like:\n\n" + 
/* 142 */               toYamlOutput(((YAMLNode)entry.getValue()).getMap()) + "\n"); continue;
/*     */         } 
/* 144 */         if (type.equals("cuboid")) {
/* 145 */           Vector pt1 = (Vector)Preconditions.checkNotNull(node.getVector("min"));
/* 146 */           Vector pt2 = (Vector)Preconditions.checkNotNull(node.getVector("max"));
/* 147 */           BlockVector min = Vector.getMinimum(pt1, pt2).toBlockVector();
/* 148 */           BlockVector max = Vector.getMaximum(pt1, pt2).toBlockVector();
/* 149 */           ProtectedCuboidRegion protectedCuboidRegion = new ProtectedCuboidRegion(id, min, max);
/* 150 */         } else if (type.equals("poly2d")) {
/* 151 */           Integer minY = (Integer)Preconditions.checkNotNull(node.getInt("min-y"));
/* 152 */           Integer maxY = (Integer)Preconditions.checkNotNull(node.getInt("max-y"));
/* 153 */           List<BlockVector2D> points = node.getBlockVector2dList("points", null);
/* 154 */           ProtectedPolygonalRegion protectedPolygonalRegion = new ProtectedPolygonalRegion(id, points, minY.intValue(), maxY.intValue());
/* 155 */         } else if (type.equals("global")) {
/* 156 */           globalProtectedRegion = new GlobalProtectedRegion(id);
/*     */         } else {
/* 158 */           log.warning("Unknown region type for region '" + id + "'!\n" + "Here is what the region data looks like:\n\n" + 
/* 159 */               toYamlOutput(((YAMLNode)entry.getValue()).getMap()) + "\n");
/*     */           
/*     */           continue;
/*     */         } 
/* 163 */         Integer priority = (Integer)Preconditions.checkNotNull(node.getInt("priority"));
/* 164 */         globalProtectedRegion.setPriority(priority.intValue());
/* 165 */         setFlags((ProtectedRegion)globalProtectedRegion, node.getNode("flags"));
/* 166 */         globalProtectedRegion.setOwners(parseDomain(node.getNode("owners")));
/* 167 */         globalProtectedRegion.setMembers(parseDomain(node.getNode("members")));
/*     */         
/* 169 */         loaded.put(id, globalProtectedRegion);
/*     */         
/* 171 */         String parentId = node.getString("parent");
/* 172 */         if (parentId != null) {
/* 173 */           parentSets.put(globalProtectedRegion, parentId);
/*     */         }
/* 175 */       } catch (NullPointerException e) {
/* 176 */         log.log(Level.WARNING, "Unexpected NullPointerException encountered during parsing for the region '" + id + "'!\n" + "Here is what the region data looks like:\n\n" + 
/*     */             
/* 178 */             toYamlOutput(((YAMLNode)entry.getValue()).getMap()) + "\n\nNote: This region will disappear as a result!", e);
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 184 */     RegionDatabaseUtils.relinkParents(loaded, parentSets);
/*     */     
/* 186 */     return new HashSet<ProtectedRegion>(loaded.values());
/*     */   }
/*     */ 
/*     */   
/*     */   public void saveAll(Set<ProtectedRegion> regions) throws StorageException {
/* 191 */     Preconditions.checkNotNull(regions);
/*     */     
/* 193 */     File tempFile = new File(this.file.getParentFile(), this.file.getName() + ".tmp");
/* 194 */     YAMLProcessor config = createYamlProcessor(tempFile);
/*     */     
/* 196 */     config.clear();
/*     */     
/* 198 */     YAMLNode regionsNode = config.addNode("regions");
/* 199 */     Map<String, Object> map = regionsNode.getMap();
/*     */     
/* 201 */     for (ProtectedRegion region : regions) {
/* 202 */       Map<String, Object> nodeMap = new HashMap<String, Object>();
/* 203 */       map.put(region.getId(), nodeMap);
/* 204 */       YAMLNode node = new YAMLNode(nodeMap, false);
/*     */       
/* 206 */       if (region instanceof ProtectedCuboidRegion) {
/* 207 */         ProtectedCuboidRegion cuboid = (ProtectedCuboidRegion)region;
/* 208 */         node.setProperty("type", "cuboid");
/* 209 */         node.setProperty("min", cuboid.getMinimumPoint());
/* 210 */         node.setProperty("max", cuboid.getMaximumPoint());
/* 211 */       } else if (region instanceof ProtectedPolygonalRegion) {
/* 212 */         ProtectedPolygonalRegion poly = (ProtectedPolygonalRegion)region;
/* 213 */         node.setProperty("type", "poly2d");
/* 214 */         node.setProperty("min-y", Integer.valueOf(poly.getMinimumPoint().getBlockY()));
/* 215 */         node.setProperty("max-y", Integer.valueOf(poly.getMaximumPoint().getBlockY()));
/*     */         
/* 217 */         List<Map<String, Object>> points = new ArrayList<Map<String, Object>>();
/* 218 */         for (BlockVector2D point : poly.getPoints()) {
/* 219 */           Map<String, Object> data = new HashMap<String, Object>();
/* 220 */           data.put("x", Integer.valueOf(point.getBlockX()));
/* 221 */           data.put("z", Integer.valueOf(point.getBlockZ()));
/* 222 */           points.add(data);
/*     */         } 
/*     */         
/* 225 */         node.setProperty("points", points);
/* 226 */       } else if (region instanceof GlobalProtectedRegion) {
/* 227 */         node.setProperty("type", "global");
/*     */       } else {
/* 229 */         node.setProperty("type", region.getClass().getCanonicalName());
/*     */       } 
/*     */       
/* 232 */       node.setProperty("priority", Integer.valueOf(region.getPriority()));
/* 233 */       node.setProperty("flags", getFlagData(region));
/* 234 */       node.setProperty("owners", getDomainData(region.getOwners()));
/* 235 */       node.setProperty("members", getDomainData(region.getMembers()));
/*     */       
/* 237 */       ProtectedRegion parent = region.getParent();
/* 238 */       if (parent != null) {
/* 239 */         node.setProperty("parent", parent.getId());
/*     */       }
/*     */     } 
/*     */     
/* 243 */     config.setHeader("#\r\n# WorldGuard regions file\r\n#\r\n# WARNING: THIS FILE IS AUTOMATICALLY GENERATED. If you modify this file by\r\n# hand, be aware that A SINGLE MISTYPED CHARACTER CAN CORRUPT THE FILE. If\r\n# WorldGuard is unable to parse the file, your regions will FAIL TO LOAD and\r\n# the contents of this file will reset. Please use a YAML validator such as\r\n# http://yaml-online-parser.appspot.com (for smaller files).\r\n#\r\n# REMEMBER TO KEEP PERIODICAL BACKUPS.\r\n#");
/* 244 */     config.save();
/*     */ 
/*     */     
/* 247 */     this.file.delete();
/* 248 */     if (!tempFile.renameTo(this.file)) {
/* 249 */       throw new StorageException("Failed to rename temporary regions file to " + this.file.getAbsolutePath());
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   public void saveChanges(RegionDifference difference) throws DifferenceSaveException {
/* 255 */     throw new DifferenceSaveException("Not supported");
/*     */   }
/*     */ 
/*     */   
/*     */   private DefaultDomain parseDomain(YAMLNode node) {
/* 260 */     if (node == null) {
/* 261 */       return new DefaultDomain();
/*     */     }
/*     */     
/* 264 */     DefaultDomain domain = new DefaultDomain();
/*     */     
/* 266 */     for (String name : node.getStringList("players", null)) {
/* 267 */       if (!name.isEmpty()) {
/* 268 */         domain.addPlayer(name);
/*     */       }
/*     */     } 
/*     */     
/* 272 */     for (String stringId : node.getStringList("unique-ids", null)) {
/*     */       try {
/* 274 */         domain.addPlayer(UUID.fromString(stringId));
/* 275 */       } catch (IllegalArgumentException e) {
/* 276 */         log.log(Level.WARNING, "Failed to parse UUID '" + stringId + "'", e);
/*     */       } 
/*     */     } 
/*     */     
/* 280 */     for (String name : node.getStringList("groups", null)) {
/* 281 */       if (!name.isEmpty()) {
/* 282 */         domain.addGroup(name);
/*     */       }
/*     */     } 
/*     */     
/* 286 */     return domain;
/*     */   }
/*     */   
/*     */   private Map<String, Object> getFlagData(ProtectedRegion region) {
/* 290 */     Map<String, Object> flagData = new HashMap<String, Object>();
/*     */     
/* 292 */     for (Map.Entry<Flag<?>, Object> entry : (Iterable<Map.Entry<Flag<?>, Object>>)region.getFlags().entrySet()) {
/* 293 */       Flag<?> flag = entry.getKey();
/* 294 */       addMarshalledFlag(flagData, flag, entry.getValue());
/*     */     } 
/*     */     
/* 297 */     return flagData;
/*     */   }
/*     */   
/*     */   private void setFlags(ProtectedRegion region, YAMLNode flagsData) {
/* 301 */     if (flagsData != null) {
/* 302 */       RegionDatabaseUtils.trySetFlagMap(region, flagsData.getMap());
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   private <V> void addMarshalledFlag(Map<String, Object> flagData, Flag<V> flag, Object val) {
/* 308 */     if (val == null) {
/*     */       return;
/*     */     }
/*     */     
/* 312 */     flagData.put(flag.getName(), flag.marshal(val));
/*     */   }
/*     */   
/*     */   private Map<String, Object> getDomainData(DefaultDomain domain) {
/* 316 */     Map<String, Object> domainData = new HashMap<String, Object>();
/*     */ 
/*     */     
/* 319 */     setDomainData(domainData, "players", domain.getPlayers());
/* 320 */     setDomainData(domainData, "unique-ids", domain.getUniqueIds());
/* 321 */     setDomainData(domainData, "groups", domain.getGroups());
/*     */     
/* 323 */     return domainData;
/*     */   }
/*     */   
/*     */   private void setDomainData(Map<String, Object> domainData, String key, Set<?> domain) {
/* 327 */     if (domain.isEmpty()) {
/*     */       return;
/*     */     }
/*     */     
/* 331 */     List<String> list = new ArrayList<String>();
/*     */     
/* 333 */     for (Object str : domain) {
/* 334 */       list.add(String.valueOf(str));
/*     */     }
/*     */     
/* 337 */     domainData.put(key, list);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private YAMLProcessor createYamlProcessor(File file) {
/* 347 */     Preconditions.checkNotNull(file);
/* 348 */     return new YAMLProcessor(file, false, YAMLFormat.COMPACT);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static String toYamlOutput(Object object) {
/*     */     try {
/* 359 */       return ERROR_DUMP_YAML.dump(object).replaceAll("(?m)^", "\t");
/* 360 */     } catch (Throwable t) {
/* 361 */       return "<error while dumping object>";
/*     */     } 
/*     */   }
/*     */ }


/* Location:              C:\Users\igors\Desktop\worldguard-6.0.0-beta-05.jar!\com\sk89q\worldguard\protection\managers\storage\file\YamlRegionFile.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       1.1.3
 */